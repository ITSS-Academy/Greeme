import { AccordionItem } from './../index';
import { AccordionItemArrow } from './../index';
import { AfterViewInit, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges, EventEmitter } from '@angular/core';
import { BaseElement } from './smart.element';
import * as i0 from "@angular/core";
export { AccordionItemArrow, ElementRenderMode } from './../index';
export { Smart } from './smart.element';
export { AccordionItem } from './../index';
export declare class AccordionItemComponent extends BaseElement implements OnInit, AfterViewInit, OnDestroy, OnChanges {
    constructor(ref: ElementRef<AccordionItem>);
    private eventHandlers;
    nativeElement: AccordionItem;
    /** @description Creates the component on demand.
     * @param properties An optional object of properties, which will be added to the template binded ones.
     */
    createComponent(properties?: {}): any;
    /** @description Sets or gets header's arrow position. If the value is 'none' the arrow is not shown. */
    get arrow(): AccordionItemArrow | string;
    set arrow(value: AccordionItemArrow | string);
    /** @description Sets or gets the content if the item. */
    get content(): string | HTMLElement;
    set content(value: string | HTMLElement);
    /** @description Sets or gets the expanded state. */
    get expanded(): boolean;
    set expanded(value: boolean);
    /** @description Sets or gets the focus state. */
    get focused(): boolean;
    set focused(value: boolean);
    /** @description Sets or gets the label if the item. */
    get label(): string;
    set label(value: string);
    /** @description This event is triggered when the item is collapsed.
    *  @param event. The custom event. 	*/
    onCollapse: EventEmitter<CustomEvent>;
    /** @description This event is triggered when the item is expanded.
    *  @param event. The custom event. 	*/
    onExpand: EventEmitter<CustomEvent>;
    get isRendered(): boolean;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /** @description Add event listeners. */
    private listen;
    /** @description Remove event listeners. */
    private unlisten;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccordionItemComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AccordionItemComponent, "smart-accordion-item, [smart-accordion-item]", ["smart-accordion-item"], { "arrow": "arrow"; "content": "content"; "expanded": "expanded"; "focused": "focused"; "label": "label"; }, { "onCollapse": "onCollapse"; "onExpand": "onExpand"; }, never>;
}
