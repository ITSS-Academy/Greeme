import { Directive, Input } from '@angular/core';
import { BaseElement } from './smart.element';
import * as i0 from "@angular/core";
export { Smart } from './smart.element';
export class FormControlComponent extends BaseElement {
    constructor(ref) {
        super(ref);
        this.eventHandlers = [];
        this.nativeElement = ref.nativeElement;
    }
    /** @description Creates the component on demand.
     * @param properties An optional object of properties, which will be added to the template binded ones.
     */
    createComponent(properties = {}) {
        this.nativeElement = document.createElement('smart-form-control');
        for (let propertyName in properties) {
            this.nativeElement[propertyName] = properties[propertyName];
        }
        return this.nativeElement;
    }
    /** @description Gets or Sets the FormControl Action. This property is used when the 'controlType' is 'button' or 'submit' */
    get action() {
        return this.nativeElement ? this.nativeElement.action : undefined;
    }
    set action(value) {
        this.nativeElement ? this.nativeElement.action = value : undefined;
    }
    /** @description Sets or Gets the alignment of the FormControl */
    get align() {
        return this.nativeElement ? this.nativeElement.align : undefined;
    }
    set align(value) {
        this.nativeElement ? this.nativeElement.align = value : undefined;
    }
    /** @description HTML Content displayed after the Form Control */
    get appendHTML() {
        return this.nativeElement ? this.nativeElement.appendHTML : undefined;
    }
    set appendHTML(value) {
        this.nativeElement ? this.nativeElement.appendHTML = value : undefined;
    }
    /** @description JSON object with initialization properties of the UI component. Example: { dataSource: ['item 1', 'item 2', 'item 3'] } will set the dataSource property of the Form control. */
    get controlOptions() {
        return this.nativeElement ? this.nativeElement.controlOptions : undefined;
    }
    set controlOptions(value) {
        this.nativeElement ? this.nativeElement.controlOptions = value : undefined;
    }
    /** @description The type of the control. */
    get controlType() {
        return this.nativeElement ? this.nativeElement.controlType : undefined;
    }
    set controlType(value) {
        this.nativeElement ? this.nativeElement.controlType = value : undefined;
    }
    /** @description Sets the Form Group columns. */
    get columns() {
        return this.nativeElement ? this.nativeElement.columns : undefined;
    }
    set columns(value) {
        this.nativeElement ? this.nativeElement.columns = value : undefined;
    }
    /** @description Sets the Form control column span. */
    get columnSpan() {
        return this.nativeElement ? this.nativeElement.columnSpan : undefined;
    }
    set columnSpan(value) {
        this.nativeElement ? this.nativeElement.columnSpan = value : undefined;
    }
    /** @description Sets the Form control data field. The control's inner input's name is set to the dataField value and in the FormGroup it is accessible through the dataField value. */
    get dataField() {
        return this.nativeElement ? this.nativeElement.dataField : undefined;
    }
    set dataField(value) {
        this.nativeElement ? this.nativeElement.dataField = value : undefined;
    }
    /** @description Sets the Form control disabled mode. */
    get disabled() {
        return this.nativeElement ? this.nativeElement.disabled : undefined;
    }
    set disabled(value) {
        this.nativeElement ? this.nativeElement.disabled = value : undefined;
    }
    /** @description Gets whether the Form control is 'dirty' i.e its value is changed by the user. */
    get dirty() {
        return this.nativeElement ? this.nativeElement.dirty : undefined;
    }
    set dirty(value) {
        this.nativeElement ? this.nativeElement.dirty = value : undefined;
    }
    /** @description Gets or Sets the Form control's info icon's tooltip. */
    get info() {
        return this.nativeElement ? this.nativeElement.info : undefined;
    }
    set info(value) {
        this.nativeElement ? this.nativeElement.info = value : undefined;
    }
    /** @description Gets whether the Form control is invalid. */
    get invalid() {
        return this.nativeElement ? this.nativeElement.invalid : undefined;
    }
    set invalid(value) {
        this.nativeElement ? this.nativeElement.invalid = value : undefined;
    }
    /** @description Gets or Sets the Form control's label. */
    get label() {
        return this.nativeElement ? this.nativeElement.label : undefined;
    }
    set label(value) {
        this.nativeElement ? this.nativeElement.label = value : undefined;
    }
    /** @description Gets or Sets the Form control's label position. */
    get labelPosition() {
        return this.nativeElement ? this.nativeElement.labelPosition : undefined;
    }
    set labelPosition(value) {
        this.nativeElement ? this.nativeElement.labelPosition = value : undefined;
    }
    /** @description Gets or Sets the offset between the label and the control. */
    get labelOffset() {
        return this.nativeElement ? this.nativeElement.labelOffset : undefined;
    }
    set labelOffset(value) {
        this.nativeElement ? this.nativeElement.labelOffset = value : undefined;
    }
    /** @description FormGroup only(when controlType is set to 'group'). Gets or Sets whether the navigation buttons are displayed. The property has effect when the viewMode property is set. */
    get labelAlign() {
        return this.nativeElement ? this.nativeElement.labelAlign : undefined;
    }
    set labelAlign(value) {
        this.nativeElement ? this.nativeElement.labelAlign = value : undefined;
    }
    /** @description FormGroup only(when controlType is set to 'group'). Gets or Sets the next button label. */
    get nextButtonLabel() {
        return this.nativeElement ? this.nativeElement.nextButtonLabel : undefined;
    }
    set nextButtonLabel(value) {
        this.nativeElement ? this.nativeElement.nextButtonLabel = value : undefined;
    }
    /** @description FormGroup only(when controlType is set to 'group'). Gets or Sets the back button label. */
    get backButtonLabel() {
        return this.nativeElement ? this.nativeElement.backButtonLabel : undefined;
    }
    set backButtonLabel(value) {
        this.nativeElement ? this.nativeElement.backButtonLabel = value : undefined;
    }
    /** @description Gets or Sets the FormControl placeholder. */
    get placeholder() {
        return this.nativeElement ? this.nativeElement.placeholder : undefined;
    }
    set placeholder(value) {
        this.nativeElement ? this.nativeElement.placeholder = value : undefined;
    }
    /** @description HTML Content displayed before the Form Control */
    get prependHTML() {
        return this.nativeElement ? this.nativeElement.prependHTML : undefined;
    }
    set prependHTML(value) {
        this.nativeElement ? this.nativeElement.prependHTML = value : undefined;
    }
    /** @description Gets or Sets the Form control readonly mode. */
    get readonly() {
        return this.nativeElement ? this.nativeElement.readonly : undefined;
    }
    set readonly(value) {
        this.nativeElement ? this.nativeElement.readonly = value : undefined;
    }
    /** @description Gets or Sets whether this field is required. */
    get required() {
        return this.nativeElement ? this.nativeElement.required : undefined;
    }
    set required(value) {
        this.nativeElement ? this.nativeElement.required = value : undefined;
    }
    /** @description Gets whether the Form control is not touched by the user. This flag is changed usually on blur, after the user interacted with the Form control */
    get untouched() {
        return this.nativeElement ? this.nativeElement.untouched : undefined;
    }
    set untouched(value) {
        this.nativeElement ? this.nativeElement.untouched = value : undefined;
    }
    /** @description Gets or Sets whether colon is displayed after the label. */
    get showColonAfterLabel() {
        return this.nativeElement ? this.nativeElement.showColonAfterLabel : undefined;
    }
    set showColonAfterLabel(value) {
        this.nativeElement ? this.nativeElement.showColonAfterLabel = value : undefined;
    }
    /** @description FormGroup only(when controlType is set to 'group'). Gets or Sets whether the navigation buttons are displayed. The property has effect when the viewMode property is set. */
    get showButtons() {
        return this.nativeElement ? this.nativeElement.showButtons : undefined;
    }
    set showButtons(value) {
        this.nativeElement ? this.nativeElement.showButtons = value : undefined;
    }
    /** @description Sets or Gets the Form control or Form group value. */
    get value() {
        return this.nativeElement ? this.nativeElement.value : undefined;
    }
    set value(value) {
        this.nativeElement ? this.nativeElement.value = value : undefined;
    }
    /** @description Gets whether the Form control is valid. */
    get valid() {
        return this.nativeElement ? this.nativeElement.valid : undefined;
    }
    set valid(value) {
        this.nativeElement ? this.nativeElement.valid = value : undefined;
    }
    /** @description Sets or gets the column's validation rules. The expected value is an Array of Objects. Each object should have a 'type' property that can be set to 'required', 'min', 'max', 'minLength', 'maxLength', 'email', 'null', 'requiredTrue', 'minData', 'maxDate', 'pattern'. The 'value' property should be set, too. For validation rule types 'required', 'requiredTrue' and 'null' you can skip the 'value' property. Optional property is 'message', which determines the error message. */
    get validationRules() {
        return this.nativeElement ? this.nativeElement.validationRules : undefined;
    }
    set validationRules(value) {
        this.nativeElement ? this.nativeElement.validationRules = value : undefined;
    }
    /** @description FormGroup only(when controlType is set to 'group'). Gets or Sets the form'group view mode. */
    get viewMode() {
        return this.nativeElement ? this.nativeElement.viewMode : undefined;
    }
    set viewMode(value) {
        this.nativeElement ? this.nativeElement.viewMode = value : undefined;
    }
    get isRendered() {
        return this.nativeElement ? this.nativeElement.isRendered : false;
    }
    ngOnInit() {
    }
    ngAfterViewInit() {
        const that = this;
        that.onCreate.emit(that.nativeElement);
        this.nativeElement.classList.add('smart-angular');
        this.nativeElement.whenRendered(() => { that.onReady.emit(that.nativeElement); });
        this.listen();
    }
    ngOnDestroy() {
        this.unlisten();
    }
    ngOnChanges(changes) {
        if (this.nativeElement && this.nativeElement.isRendered) {
            for (const propName in changes) {
                if (changes.hasOwnProperty(propName)) {
                    this.nativeElement[propName] = changes[propName].currentValue;
                }
            }
        }
    }
    /** @description Add event listeners. */
    listen() {
        const that = this;
    }
    /** @description Remove event listeners. */
    unlisten() {
        const that = this;
    }
}
FormControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: FormControlComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
FormControlComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.6", type: FormControlComponent, selector: "smart-form-control, [smart-form-control]", inputs: { action: "action", align: "align", appendHTML: "appendHTML", controlOptions: "controlOptions", controlType: "controlType", columns: "columns", columnSpan: "columnSpan", dataField: "dataField", disabled: "disabled", dirty: "dirty", info: "info", invalid: "invalid", label: "label", labelPosition: "labelPosition", labelOffset: "labelOffset", labelAlign: "labelAlign", nextButtonLabel: "nextButtonLabel", backButtonLabel: "backButtonLabel", placeholder: "placeholder", prependHTML: "prependHTML", readonly: "readonly", required: "required", untouched: "untouched", showColonAfterLabel: "showColonAfterLabel", showButtons: "showButtons", value: "value", valid: "valid", validationRules: "validationRules", viewMode: "viewMode" }, exportAs: ["smart-form-control"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: FormControlComponent, decorators: [{
            type: Directive,
            args: [{
                    exportAs: 'smart-form-control', selector: 'smart-form-control, [smart-form-control]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { action: [{
                type: Input
            }], align: [{
                type: Input
            }], appendHTML: [{
                type: Input
            }], controlOptions: [{
                type: Input
            }], controlType: [{
                type: Input
            }], columns: [{
                type: Input
            }], columnSpan: [{
                type: Input
            }], dataField: [{
                type: Input
            }], disabled: [{
                type: Input
            }], dirty: [{
                type: Input
            }], info: [{
                type: Input
            }], invalid: [{
                type: Input
            }], label: [{
                type: Input
            }], labelPosition: [{
                type: Input
            }], labelOffset: [{
                type: Input
            }], labelAlign: [{
                type: Input
            }], nextButtonLabel: [{
                type: Input
            }], backButtonLabel: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], prependHTML: [{
                type: Input
            }], readonly: [{
                type: Input
            }], required: [{
                type: Input
            }], untouched: [{
                type: Input
            }], showColonAfterLabel: [{
                type: Input
            }], showButtons: [{
                type: Input
            }], value: [{
                type: Input
            }], valid: [{
                type: Input
            }], validationRules: [{
                type: Input
            }], viewMode: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,