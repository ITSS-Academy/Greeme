import { Button } from './../index';
import { Animation, ClickMode } from './../index';
import { AfterViewInit, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges, EventEmitter } from '@angular/core';
import { BaseElement } from './smart.element';
import * as i0 from "@angular/core";
export { Animation, ClickMode, ElementRenderMode } from './../index';
export { Smart } from './smart.element';
export { Button } from './../index';
export declare class ButtonComponent extends BaseElement implements OnInit, AfterViewInit, OnDestroy, OnChanges {
    constructor(ref: ElementRef<Button>);
    private eventHandlers;
    nativeElement: Button;
    /** @description Creates the component on demand.
     * @param properties An optional object of properties, which will be added to the template binded ones.
     */
    createComponent(properties?: {}): any;
    /** @description Sets or gets the animation mode. Animation is disabled when the property is set to 'none' */
    get animation(): Animation | string;
    set animation(value: Animation | string);
    /** @description Determines the click mode for the element. */
    get clickMode(): ClickMode | string;
    set clickMode(value: ClickMode | string);
    /** @description Sets the content of the element. */
    get content(): any;
    set content(value: any);
    /** @description Enables or disables the button.  */
    get disabled(): boolean;
    set disabled(value: boolean);
    /** @description Sets the inner HTML of the element. */
    get innerHTML(): string;
    set innerHTML(value: string);
    /** @description Sets or gets the language. Used in conjunction with the property messages.  */
    get locale(): string;
    set locale(value: string);
    /** @description Callback used to customize the format of the messages that are returned from the Localization Module. */
    get localizeFormatFunction(): any;
    set localizeFormatFunction(value: any);
    /** @description Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.  */
    get messages(): any;
    set messages(value: any);
    /** @description Sets or gets the name attribute for the element. Name is used when submiting HTML forms. */
    get name(): string;
    set name(value: string);
    /** @description If the custom element is readonly, it cannot be interacted with. */
    get readonly(): boolean;
    set readonly(value: boolean);
    /** @description Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts. */
    get rightToLeft(): boolean;
    set rightToLeft(value: boolean);
    /** @description Determines the theme. Theme defines the look of the element */
    get theme(): string;
    set theme(value: string);
    /** @description Sets or gets the type of the button. */
    get type(): string;
    set type(value: string);
    /** @description Sets or gets the button's value.  */
    get value(): string;
    set value(value: string);
    /** @description If is set to true, the element cannot be focused. */
    get unfocusable(): boolean;
    set unfocusable(value: boolean);
    /** @description Click event is triggered regarding to the chosen clickMode.
    *  @param event. The custom event. 	*/
    onClick: EventEmitter<CustomEvent>;
    get isRendered(): boolean;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /** @description Add event listeners. */
    private listen;
    /** @description Remove event listeners. */
    private unlisten;
    static ɵfac: i0.ɵɵFactoryDeclaration<ButtonComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ButtonComponent, "smart-button, [smart-button]", ["smart-button"], { "animation": "animation"; "clickMode": "clickMode"; "content": "content"; "disabled": "disabled"; "innerHTML": "innerHTML"; "locale": "locale"; "localizeFormatFunction": "localizeFormatFunction"; "messages": "messages"; "name": "name"; "readonly": "readonly"; "rightToLeft": "rightToLeft"; "theme": "theme"; "type": "type"; "value": "value"; "unfocusable": "unfocusable"; }, { "onClick": "onClick"; }, never>;
}
