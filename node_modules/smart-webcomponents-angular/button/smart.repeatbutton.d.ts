import { RepeatButton } from './../index';
import { Animation, ClickMode } from './../index';
import { AfterViewInit, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges, EventEmitter } from '@angular/core';
import { BaseElement } from './smart.element';
import * as i0 from "@angular/core";
export { Animation, ClickMode, ElementRenderMode } from './../index';
export { Smart } from './smart.element';
export { RepeatButton } from './../index';
export declare class RepeatButtonComponent extends BaseElement implements OnInit, AfterViewInit, OnDestroy, OnChanges {
    constructor(ref: ElementRef<RepeatButton>);
    private eventHandlers;
    nativeElement: RepeatButton;
    /** @description Creates the component on demand.
     * @param properties An optional object of properties, which will be added to the template binded ones.
     */
    createComponent(properties?: {}): any;
    /** @description Sets or gets the animation mode. Animation is disabled when the property is set to 'none' */
    get animation(): Animation | string;
    set animation(value: Animation | string);
    /** @description Sets the click mode of the button. */
    get clickMode(): ClickMode | string;
    set clickMode(value: ClickMode | string);
    /** @description Sets the delay between repeats in miliseconds. */
    get delay(): number;
    set delay(value: number);
    /** @description Enables or disables the ratio button. */
    get disabled(): boolean;
    set disabled(value: boolean);
    /** @description Sets a delay before the first repeat iteration in miliseconds. */
    get initialDelay(): number;
    set initialDelay(value: number);
    /** @description Sets the inner HTML of the element. */
    get innerHTML(): string;
    set innerHTML(value: string);
    /** @description Sets or gets the language. Used in conjunction with the property messages.  */
    get locale(): string;
    set locale(value: string);
    /** @description Callback, related to localization module.  */
    get localizeFormatFunction(): any;
    set localizeFormatFunction(value: any);
    /** @description Sets an object with string values, related to the different states of passwords strength. */
    get messages(): any;
    set messages(value: any);
    /** @description Sets or gets the widget's name. */
    get name(): string;
    set name(value: string);
    /** @description If the custom element is readonly, it cannot be interacted with. */
    get readonly(): boolean;
    set readonly(value: boolean);
    /** @description Determines the theme. Theme defines the look of the element */
    get theme(): string;
    set theme(value: string);
    /** @description If is set to true, the element cannot be focused. */
    get unfocusable(): boolean;
    set unfocusable(value: boolean);
    /** @description Sets or gets the widget's value. */
    get value(): string;
    set value(value: string);
    /** @description This event is triggered when the element is clicked.
    *  @param event. The custom event. 	*/
    onClick: EventEmitter<CustomEvent>;
    get isRendered(): boolean;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /** @description Add event listeners. */
    private listen;
    /** @description Remove event listeners. */
    private unlisten;
    static ɵfac: i0.ɵɵFactoryDeclaration<RepeatButtonComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RepeatButtonComponent, "smart-repeat-button, [smart-repeat-button]", ["smart-repeat-button"], { "animation": "animation"; "clickMode": "clickMode"; "delay": "delay"; "disabled": "disabled"; "initialDelay": "initialDelay"; "innerHTML": "innerHTML"; "locale": "locale"; "localizeFormatFunction": "localizeFormatFunction"; "messages": "messages"; "name": "name"; "readonly": "readonly"; "theme": "theme"; "unfocusable": "unfocusable"; "value": "value"; }, { "onClick": "onClick"; }, never>;
}
