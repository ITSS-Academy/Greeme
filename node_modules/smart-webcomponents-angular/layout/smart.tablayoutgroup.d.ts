import { TabLayoutGroup } from './../index';
import { TabLayoutGroupOrientation, TabLayoutGroupPosition } from './../index';
import { AfterViewInit, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { BaseElement } from './smart.element';
import * as i0 from "@angular/core";
export { TabLayoutGroupOrientation, TabLayoutGroupPosition, ElementRenderMode } from './../index';
export { Smart } from './smart.element';
export { TabLayoutGroup } from './../index';
export declare class TabLayoutGroupComponent extends BaseElement implements OnInit, AfterViewInit, OnDestroy, OnChanges {
    constructor(ref: ElementRef<TabLayoutGroup>);
    private eventHandlers;
    nativeElement: TabLayoutGroup;
    /** @description Creates the component on demand.
     * @param properties An optional object of properties, which will be added to the template binded ones.
     */
    createComponent(properties?: {}): any;
    /** @description Enables or disables the element. */
    get disabled(): boolean;
    set disabled(value: boolean);
    /** @description Sets or gets the modifiers of the Layout item. */
    get modifiers(): any;
    set modifiers(value: any);
    /** @description Determines the min size of the item. */
    get min(): number;
    set min(value: number);
    /** @description Determines the label of the item. */
    get label(): string;
    set label(value: string);
    /** @description Determines the group orientation. */
    get orientation(): TabLayoutGroupOrientation | string;
    set orientation(value: TabLayoutGroupOrientation | string);
    /** @description Determines the position of the tab items group. */
    get position(): TabLayoutGroupPosition | string;
    set position(value: TabLayoutGroupPosition | string);
    /** @description Determines the size of the item. */
    get size(): any;
    set size(value: any);
    /** @description If is set to true, the element cannot be focused. */
    get unfocusable(): boolean;
    set unfocusable(value: boolean);
    get isRendered(): boolean;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /** @description Add event listeners. */
    private listen;
    /** @description Remove event listeners. */
    private unlisten;
    static ɵfac: i0.ɵɵFactoryDeclaration<TabLayoutGroupComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TabLayoutGroupComponent, "smart-tab-layout-group, [smart-tab-layout-group]", ["smart-tab-layout-group"], { "disabled": "disabled"; "modifiers": "modifiers"; "min": "min"; "label": "label"; "orientation": "orientation"; "position": "position"; "size": "size"; "unfocusable": "unfocusable"; }, {}, never>;
}
