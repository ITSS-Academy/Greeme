import { Chip } from './../index';
import { Animation } from './../index';
import { AfterViewInit, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges, EventEmitter } from '@angular/core';
import { BaseElement } from './smart.element';
import * as i0 from "@angular/core";
export { Animation, ElementRenderMode } from './../index';
export { Smart } from './smart.element';
export { Chip } from './../index';
export declare class ChipComponent extends BaseElement implements OnInit, AfterViewInit, OnDestroy, OnChanges {
    constructor(ref: ElementRef<Chip>);
    private eventHandlers;
    nativeElement: Chip;
    /** @description Creates the component on demand.
     * @param properties An optional object of properties, which will be added to the template binded ones.
     */
    createComponent(properties?: {}): any;
    /** @description Sets or gets the animation mode. Animation is disabled when the property is set to 'none' */
    get animation(): Animation | string;
    set animation(value: Animation | string);
    /** @description Sets a custom avatar that is positioned on the left side of the chip. The avatar can be an image(if the value is a url to an image), plain text or HTML. */
    get avatar(): string | null;
    set avatar(value: string | null);
    /** @description Determines whether a close button is displayed on the right side of the element. */
    get closeButton(): boolean;
    set closeButton(value: boolean);
    /** @description Enables or disables the element. Disabled elements can not be interacted with. */
    get disabled(): boolean;
    set disabled(value: boolean);
    /** @description Sets a custom template for the chip. The template can be a string that represents the id of an HTMLTemplateElement inside the DOM or it's direct reference. */
    get itemTemplate(): any;
    set itemTemplate(value: any);
    /** @description Sets or gets the language. Used in conjunction with the property messages.  */
    get locale(): string;
    set locale(value: string);
    /** @description Callback used to customize the format of the messages that are returned from the Localization Module. */
    get localizeFormatFunction(): any;
    set localizeFormatFunction(value: any);
    /** @description Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.  */
    get messages(): any;
    set messages(value: any);
    /** @description If the element is readonly, users cannot interact with it. */
    get readonly(): boolean;
    set readonly(value: boolean);
    /** @description Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts. */
    get rightToLeft(): boolean;
    set rightToLeft(value: boolean);
    /** @description Determines the theme. Theme defines the look of the element */
    get theme(): string;
    set theme(value: string);
    /** @description If is set to true, the element cannot be focused. */
    get unfocusable(): boolean;
    set unfocusable(value: boolean);
    /** @description Sets the text content of the chip. The text inside the chip represents it's value. Value must be of type string. By default it's an empty string. */
    get value(): string;
    set value(value: string);
    /** @description This event is triggered when the chip is closed.
    *  @param event. The custom event. 	Custom event was created with: event.detail(	value)
    *   value - A string representing the current value of the element.
    */
    onClose: EventEmitter<CustomEvent>;
    /** @description Closes the chip and removes it from the DOM.
    */
    close(): void;
    get isRendered(): boolean;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /** @description Add event listeners. */
    private listen;
    /** @description Remove event listeners. */
    private unlisten;
    static ɵfac: i0.ɵɵFactoryDeclaration<ChipComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ChipComponent, "smart-chip, [smart-chip]", ["smart-chip"], { "animation": "animation"; "avatar": "avatar"; "closeButton": "closeButton"; "disabled": "disabled"; "itemTemplate": "itemTemplate"; "locale": "locale"; "localizeFormatFunction": "localizeFormatFunction"; "messages": "messages"; "readonly": "readonly"; "rightToLeft": "rightToLeft"; "theme": "theme"; "unfocusable": "unfocusable"; "value": "value"; }, { "onClose": "onClose"; }, never>;
}
