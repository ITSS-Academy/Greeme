import { Led } from './../index';
import { Animation, ClickMode, LedShape } from './../index';
import { AfterViewInit, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges, EventEmitter } from '@angular/core';
import { BaseElement } from './smart.element';
import * as i0 from "@angular/core";
export { Animation, ClickMode, LedShape, ElementRenderMode } from './../index';
export { Smart } from './smart.element';
export { Led } from './../index';
export declare class LedComponent extends BaseElement implements OnInit, AfterViewInit, OnDestroy, OnChanges {
    constructor(ref: ElementRef<Led>);
    private eventHandlers;
    nativeElement: Led;
    /** @description Creates the component on demand.
     * @param properties An optional object of properties, which will be added to the template binded ones.
     */
    createComponent(properties?: {}): any;
    /** @description Sets or gets the animation mode. Animation is disabled when the property is set to 'none' */
    get animation(): Animation | string;
    set animation(value: Animation | string);
    /** @description Sets or gets the check state. */
    get checked(): boolean;
    set checked(value: boolean);
    /** @description Determines when the element fires a click event. */
    get clickMode(): ClickMode | string;
    set clickMode(value: ClickMode | string);
    /** @description Enables or disables the LED. */
    get disabled(): boolean;
    set disabled(value: boolean);
    /** @description Sets the content for the 'false' state. */
    get falseContent(): string;
    set falseContent(value: string);
    /** @description Sets custom template for LED's false state. */
    get falseTemplate(): any;
    set falseTemplate(value: any);
    /** @description Sets the LED to indeterminate state. */
    get indeterminate(): boolean;
    set indeterminate(value: boolean);
    /** @description Sets the content for the 'null' state. */
    get indeterminateContent(): string;
    set indeterminateContent(value: string);
    /** @description Sets a custom template for LED's indeterminate state. */
    get indeterminateTemplate(): any;
    set indeterminateTemplate(value: any);
    /** @description Sets or gets the language. Used in conjunction with the property messages.  */
    get locale(): string;
    set locale(value: string);
    /** @description Callback used to customize the format of the messages that are returned from the Localization Module. */
    get localizeFormatFunction(): any;
    set localizeFormatFunction(value: any);
    /** @description Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.  */
    get messages(): any;
    set messages(value: any);
    /** @description Sets or gets the name attribute for the element. Name is used when submiting HTML forms. */
    get name(): string;
    set name(value: string);
    /** @description If the widgets is readonly, the users cannot iteract with the element. */
    get readonly(): boolean;
    set readonly(value: boolean);
    /** @description Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts. */
    get rightToLeft(): boolean;
    set rightToLeft(value: boolean);
    /** @description Sets the shape of LED. */
    get shape(): LedShape | string;
    set shape(value: LedShape | string);
    /** @description Determines the theme. Theme defines the look of the element */
    get theme(): string;
    set theme(value: string);
    /** @description Sets the content for the 'true' state. */
    get trueContent(): string;
    set trueContent(value: string);
    /** @description Sets custom template for LED's true state. */
    get trueTemplate(): any;
    set trueTemplate(value: any);
    /** @description If is set to true, the element cannot be focused. */
    get unfocusable(): boolean;
    set unfocusable(value: boolean);
    /** @description Sets or gets the element's value. */
    get value(): string;
    set value(value: string);
    /** @description This event is triggered when the widget is checked/unchecked.
    *  @param event. The custom event. 	Custom event was created with: event.detail(	oldValue, 	value)
    *   oldValue - The previous value of the element before it was changed.
    *   value - The new value of the element.
    */
    onChange: EventEmitter<CustomEvent>;
    get isRendered(): boolean;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /** @description Add event listeners. */
    private listen;
    /** @description Remove event listeners. */
    private unlisten;
    static ɵfac: i0.ɵɵFactoryDeclaration<LedComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<LedComponent, "smart-led, [smart-led]", ["smart-led"], { "animation": "animation"; "checked": "checked"; "clickMode": "clickMode"; "disabled": "disabled"; "falseContent": "falseContent"; "falseTemplate": "falseTemplate"; "indeterminate": "indeterminate"; "indeterminateContent": "indeterminateContent"; "indeterminateTemplate": "indeterminateTemplate"; "locale": "locale"; "localizeFormatFunction": "localizeFormatFunction"; "messages": "messages"; "name": "name"; "readonly": "readonly"; "rightToLeft": "rightToLeft"; "shape": "shape"; "theme": "theme"; "trueContent": "trueContent"; "trueTemplate": "trueTemplate"; "unfocusable": "unfocusable"; "value": "value"; }, { "onChange": "onChange"; }, never>;
}
