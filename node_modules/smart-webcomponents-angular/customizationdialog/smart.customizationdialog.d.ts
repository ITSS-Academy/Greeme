import { CustomizationDialog } from './../index';
import { Animation } from './../index';
import { AfterViewInit, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges, EventEmitter } from '@angular/core';
import { BaseElement } from './smart.element';
import * as i0 from "@angular/core";
export { Animation, ElementRenderMode } from './../index';
export { Smart } from './smart.element';
export { CustomizationDialog } from './../index';
export declare class CustomizationDialogComponent extends BaseElement implements OnInit, AfterViewInit, OnDestroy, OnChanges {
    constructor(ref: ElementRef<CustomizationDialog>);
    private eventHandlers;
    nativeElement: CustomizationDialog;
    /** @description Creates the component on demand.
     * @param properties An optional object of properties, which will be added to the template binded ones.
     */
    createComponent(properties?: {}): any;
    /** @description Sets or gets the animation mode. Animation is disabled when the property is set to 'none' */
    get animation(): Animation | string;
    set animation(value: Animation | string);
    /** @description Array with filtered fields and their settings. */
    get dataSource(): any;
    set dataSource(value: any);
    /** @description Sets or gets the displayMember. The displayMember specifies the name of an object property to display. The name is contained in the collection specified by the 'dataSource' property. */
    get displayMember(): string;
    set displayMember(value: string);
    /** @description Enables or disables the element. */
    get disabled(): boolean;
    set disabled(value: boolean);
    /** @description Sets whether is enabled/disabled filtering tab. */
    get filtering(): boolean;
    set filtering(value: boolean);
    /** @description Sets whether is enabled/disabled grouping tab. */
    get grouping(): boolean;
    set grouping(value: boolean);
    /** @description Set's the buttons that will be visible in the header section. */
    get headerButtons(): string[];
    set headerButtons(value: string[]);
    /** @description Sets or gets the language. Used in conjunction with the property messages.  */
    get locale(): string;
    set locale(value: string);
    /** @description Callback, related to localization module.  */
    get localizeFormatFunction(): any;
    set localizeFormatFunction(value: any);
    /** @description Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.  */
    get messages(): any;
    set messages(value: any);
    /** @description Sets or gets whether the columns reordering is active. */
    get reorder(): boolean;
    set reorder(value: boolean);
    /** @description Sets or gets the tab, wich is selected on initialization. */
    get selectedTab(): number;
    set selectedTab(value: number);
    /** @description Sets whether is enabled/disabled sorting tab. */
    get sorting(): boolean;
    set sorting(value: boolean);
    /** @description Determines the theme. Theme defines the look of the element */
    get theme(): string;
    set theme(value: string);
    /** @description If is set to true, the element cannot be focused. */
    get unfocusable(): boolean;
    set unfocusable(value: boolean);
    /** @description Sets or gets element's value. It's represente by object, contained */
    get value(): any;
    set value(value: any);
    /** @description Determines the value member of an item. Stored as value in the item object. */
    get valueMember(): string;
    set valueMember(value: string);
    /** @description Sets or gets whether the columns of the element could be hidden. */
    get visibility(): boolean;
    set visibility(value: boolean);
    /** @description This event is triggered when the dialog is opened.
    *  @param event. The custom event. 	*/
    onOpen: EventEmitter<CustomEvent>;
    /** @description This event is triggered when the dialog is closed.
    *  @param event. The custom event. 	*/
    onClose: EventEmitter<CustomEvent>;
    /** @description This event is triggered when the data in the value property is changed.
    *  @param event. The custom event. 	*/
    onChange: EventEmitter<CustomEvent>;
    /** @description This event is triggered when the dialog is closed via clicking the apply button.
    *  @param event. The custom event. 	*/
    onApply: EventEmitter<CustomEvent>;
    /** @description Opens the dialog
    */
    open(): void;
    /** @description Closes the dialog.
    */
    close(): void;
    get isRendered(): boolean;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /** @description Add event listeners. */
    private listen;
    /** @description Remove event listeners. */
    private unlisten;
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomizationDialogComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CustomizationDialogComponent, "smart-customization-dialog, [smart-customization-dialog]", ["smart-customization-dialog"], { "animation": "animation"; "dataSource": "dataSource"; "displayMember": "displayMember"; "disabled": "disabled"; "filtering": "filtering"; "grouping": "grouping"; "headerButtons": "headerButtons"; "locale": "locale"; "localizeFormatFunction": "localizeFormatFunction"; "messages": "messages"; "reorder": "reorder"; "selectedTab": "selectedTab"; "sorting": "sorting"; "theme": "theme"; "unfocusable": "unfocusable"; "value": "value"; "valueMember": "valueMember"; "visibility": "visibility"; }, { "onOpen": "onOpen"; "onClose": "onClose"; "onChange": "onChange"; "onApply": "onApply"; }, never>;
}
