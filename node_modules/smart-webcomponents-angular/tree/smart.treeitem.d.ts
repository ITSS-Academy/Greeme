import { TreeItem } from './../index';
import { AfterViewInit, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { BaseElement } from './smart.element';
import * as i0 from "@angular/core";
export { ElementRenderMode } from './../index';
export { Smart } from './smart.element';
export { TreeItem } from './../index';
export declare class TreeItemComponent extends BaseElement implements OnInit, AfterViewInit, OnDestroy, OnChanges {
    constructor(ref: ElementRef<TreeItem>);
    private eventHandlers;
    nativeElement: TreeItem;
    /** @description Creates the component on demand.
     * @param properties An optional object of properties, which will be added to the template binded ones.
     */
    createComponent(properties?: {}): any;
    /** @description Enables or disables element. */
    get disabled(): boolean;
    set disabled(value: boolean);
    /** @description  */
    get label(): any;
    set label(value: any);
    /** @description  */
    get level(): number;
    set level(value: number);
    /** @description  */
    get selected(): boolean;
    set selected(value: boolean);
    /** @description  */
    get separator(): boolean;
    set separator(value: boolean);
    /** @description  */
    get shortcut(): string;
    set shortcut(value: string);
    /** @description  */
    get value(): any;
    set value(value: any);
    /** @description Disables user interaction with the item. */
    get readonly(): boolean;
    set readonly(value: boolean);
    get isRendered(): boolean;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TreeItemComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TreeItemComponent, "smart-tree-item, [smart-tree-item]", ["smart-tree-item"], { "disabled": "disabled"; "label": "label"; "level": "level"; "selected": "selected"; "separator": "separator"; "shortcut": "shortcut"; "value": "value"; "readonly": "readonly"; }, {}, never>;
}
