import { CircularProgressBar } from './../index';
import { Animation } from './../index';
import { AfterViewInit, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges, EventEmitter } from '@angular/core';
import { BaseElement } from './smart.element';
import * as i0 from "@angular/core";
export { Animation, ElementRenderMode } from './../index';
export { Smart } from './smart.element';
export { CircularProgressBar } from './../index';
export declare class CircularProgressBarComponent extends BaseElement implements OnInit, AfterViewInit, OnDestroy, OnChanges {
    constructor(ref: ElementRef<CircularProgressBar>);
    private eventHandlers;
    nativeElement: CircularProgressBar;
    /** @description Creates the component on demand.
     * @param properties An optional object of properties, which will be added to the template binded ones.
     */
    createComponent(properties?: {}): any;
    /** @description Sets or gets the animation mode. Animation is disabled when the property is set to 'none' */
    get animation(): Animation | string;
    set animation(value: Animation | string);
    /** @description Enables or disables the element.  */
    get disabled(): boolean;
    set disabled(value: boolean);
    /** @description Sets the value of the Circular Progress bar to indeterminate state(null) and starts the animation. */
    get formatFunction(): {
        (value: number): string;
    };
    set formatFunction(value: {
        (value: number): string;
    });
    /** @description Sets the filling direction of the Circular Progress Bar. */
    get indeterminate(): boolean;
    set indeterminate(value: boolean);
    /** @description Sets or gets the language. Used in conjunction with the property messages.  */
    get inverted(): boolean;
    set inverted(value: boolean);
    /** @description Callback, related to localization module.  */
    get locale(): string;
    set locale(value: string);
    /** @description Sets progress bars maximum possible value. */
    get localizeFormatFunction(): any;
    set localizeFormatFunction(value: any);
    /** @description Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.  */
    get max(): number;
    set max(value: number);
    /** @description Sets progress bars minimum possible value. */
    get messages(): any;
    set messages(value: any);
    /** @description Enables/Disabled the label for the Progress Bar. */
    get min(): number;
    set min(value: number);
    /** @description Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts. */
    get showProgressValue(): boolean;
    set showProgressValue(value: boolean);
    /** @description Determines the theme. Theme defines the look of the element */
    get rightToLeft(): boolean;
    set rightToLeft(value: boolean);
    /** @description If is set to true, the element cannot be focused. */
    get theme(): string;
    set theme(value: string);
    /** @description Sets or gets the value of the progress bar */
    get unfocusable(): boolean;
    set unfocusable(value: boolean);
    /** @description undefined */
    get value(): number;
    set value(value: number);
    /** @description This event is triggered when the value is changed.
    *  @param event. The custom event. 	*/
    onChange: EventEmitter<CustomEvent>;
    get isRendered(): boolean;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /** @description Add event listeners. */
    private listen;
    /** @description Remove event listeners. */
    private unlisten;
    static ɵfac: i0.ɵɵFactoryDeclaration<CircularProgressBarComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CircularProgressBarComponent, "smart-circular-progress-bar, [smart-circular-progress-bar]", ["smart-circular-progress-bar"], { "animation": "animation"; "disabled": "disabled"; "formatFunction": "formatFunction"; "indeterminate": "indeterminate"; "inverted": "inverted"; "locale": "locale"; "localizeFormatFunction": "localizeFormatFunction"; "max": "max"; "messages": "messages"; "min": "min"; "showProgressValue": "showProgressValue"; "rightToLeft": "rightToLeft"; "theme": "theme"; "unfocusable": "unfocusable"; "value": "value"; }, { "onChange": "onChange"; }, never>;
}
